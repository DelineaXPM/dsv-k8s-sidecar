// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/DelineaXPM/dsv-k8s-sidecar/pkg/secrets (interfaces: SecretClient,DSVClient,DSVServer)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	secrets "github.com/DelineaXPM/dsv-k8s-sidecar/pkg/secrets"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockSecretClient is a mock of SecretClient interface
type MockSecretClient struct {
	ctrl     *gomock.Controller
	recorder *MockSecretClientMockRecorder
}

// MockSecretClientMockRecorder is the mock recorder for MockSecretClient
type MockSecretClientMockRecorder struct {
	mock *MockSecretClient
}

// NewMockSecretClient creates a new mock instance
func NewMockSecretClient(ctrl *gomock.Controller) *MockSecretClient {
	mock := &MockSecretClient{ctrl: ctrl}
	mock.recorder = &MockSecretClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSecretClient) EXPECT() *MockSecretClientMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockSecretClient) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockSecretClientMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSecretClient)(nil).Close))
}

// GetSecret mocks base method
func (m *MockSecretClient) GetSecret(arg0 string) (*secrets.SecretResponseData, *secrets.SecretClientError) {
	ret := m.ctrl.Call(m, "GetSecret", arg0)
	ret0, _ := ret[0].(*secrets.SecretResponseData)
	ret1, _ := ret[1].(*secrets.SecretClientError)
	return ret0, ret1
}

// GetSecret indicates an expected call of GetSecret
func (mr *MockSecretClientMockRecorder) GetSecret(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecret", reflect.TypeOf((*MockSecretClient)(nil).GetSecret), arg0)
}

// SetSecretURL mocks base method
func (m *MockSecretClient) SetSecretURL(arg0 string) {
	m.ctrl.Call(m, "SetSecretURL", arg0)
}

// SetSecretURL indicates an expected call of SetSecretURL
func (mr *MockSecretClientMockRecorder) SetSecretURL(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSecretURL", reflect.TypeOf((*MockSecretClient)(nil).SetSecretURL), arg0)
}

// MockDSVClient is a mock of DSVClient interface
type MockDSVClient struct {
	ctrl     *gomock.Controller
	recorder *MockDSVClientMockRecorder
}

// MockDSVClientMockRecorder is the mock recorder for MockDSVClient
type MockDSVClientMockRecorder struct {
	mock *MockDSVClient
}

// NewMockDSVClient creates a new mock instance
func NewMockDSVClient(ctrl *gomock.Controller) *MockDSVClient {
	mock := &MockDSVClient{ctrl: ctrl}
	mock.recorder = &MockDSVClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDSVClient) EXPECT() *MockDSVClientMockRecorder {
	return m.recorder
}

// GetSecret mocks base method
func (m *MockDSVClient) GetSecret(arg0 context.Context, arg1 *secrets.Secret, arg2 ...grpc.CallOption) (*secrets.Secret, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSecret", varargs...)
	ret0, _ := ret[0].(*secrets.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecret indicates an expected call of GetSecret
func (mr *MockDSVClientMockRecorder) GetSecret(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecret", reflect.TypeOf((*MockDSVClient)(nil).GetSecret), varargs...)
}

// MockDSVServer is a mock of DSVServer interface
type MockDSVServer struct {
	ctrl     *gomock.Controller
	recorder *MockDSVServerMockRecorder
}

// MockDSVServerMockRecorder is the mock recorder for MockDSVServer
type MockDSVServerMockRecorder struct {
	mock *MockDSVServer
}

// NewMockDSVServer creates a new mock instance
func NewMockDSVServer(ctrl *gomock.Controller) *MockDSVServer {
	mock := &MockDSVServer{ctrl: ctrl}
	mock.recorder = &MockDSVServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDSVServer) EXPECT() *MockDSVServerMockRecorder {
	return m.recorder
}

// GetSecret mocks base method
func (m *MockDSVServer) GetSecret(arg0 context.Context, arg1 *secrets.Secret) (*secrets.Secret, error) {
	ret := m.ctrl.Call(m, "GetSecret", arg0, arg1)
	ret0, _ := ret[0].(*secrets.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecret indicates an expected call of GetSecret
func (mr *MockDSVServerMockRecorder) GetSecret(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecret", reflect.TypeOf((*MockDSVServer)(nil).GetSecret), arg0, arg1)
}
