// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/DelineaXPM/dsv-k8s-sidecar/pkg/auth (interfaces: AuthService)

// Package mocks is a generated GoMock package.
package mocks

import (
	auth "github.com/DelineaXPM/dsv-k8s-sidecar/pkg/auth"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockAuthService is a mock of AuthService interface
type MockAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceMockRecorder
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService
type MockAuthServiceMockRecorder struct {
	mock *MockAuthService
}

// NewMockAuthService creates a new mock instance
func NewMockAuthService(ctrl *gomock.Controller) *MockAuthService {
	mock := &MockAuthService{ctrl: ctrl}
	mock.recorder = &MockAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthService) EXPECT() *MockAuthServiceMockRecorder {
	return m.recorder
}

// GetToken mocks base method
func (m *MockAuthService) GetToken(arg0 *auth.TokenRequest) *auth.TokenResponse {
	ret := m.ctrl.Call(m, "GetToken", arg0)
	ret0, _ := ret[0].(*auth.TokenResponse)
	return ret0
}

// GetToken indicates an expected call of GetToken
func (mr *MockAuthServiceMockRecorder) GetToken(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToken", reflect.TypeOf((*MockAuthService)(nil).GetToken), arg0)
}

// GetUnaryInterceptor mocks base method
func (m *MockAuthService) GetUnaryInterceptor() grpc.ServerOption {
	ret := m.ctrl.Call(m, "GetUnaryInterceptor")
	ret0, _ := ret[0].(grpc.ServerOption)
	return ret0
}

// GetUnaryInterceptor indicates an expected call of GetUnaryInterceptor
func (mr *MockAuthServiceMockRecorder) GetUnaryInterceptor() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnaryInterceptor", reflect.TypeOf((*MockAuthService)(nil).GetUnaryInterceptor))
}
